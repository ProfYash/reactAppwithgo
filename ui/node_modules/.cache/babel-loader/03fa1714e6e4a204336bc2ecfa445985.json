{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91989\\\\Desktop\\\\Swabhav\\\\reactAppwithgo\\\\ui\\\\src\\\\DisplayUserAddress.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport DisplayUserAddress from './DisplayUserAddress';\nimport { useParams } from \"react-router-dom\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default _s(_ref => {\n  _s();\n\n  let {\n    roll\n  } = _ref;\n  const [loginStatus, updateloginStatus] = useState('');\n  const [address, updateaddress] = useState({});\n  let RollNo = roll;\n  console.log(RollNo);\n\n  const loadusers = async e => {\n    const resp = await axios.get(`http://localhost:4002/api/v1/blog/addaddress/${RollNo}`).catch(e => {\n      console.log(e.message);\n\n      if (e.response.status == 401) {\n        updateloginStatus('Unauthorized');\n        return;\n      }\n    });\n\n    if (resp != null) {\n      console.log(\"data: \", resp.data);\n      updateaddress(resp.data);\n    }\n  };\n\n  useEffect(() => {\n    loadusers();\n  }, []); //useeffect for call method at time of load and only once\n  //creating dynmic number of cards\n\n  const cardofuser = Object.values(address).map(a => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      style: {\n        width: \"50%\",\n        marginBottom: \"50px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: [\"AddressName:\\xA0\\xA0\\xA0\", a.addressname, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 50\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 56\n        }, this), \"First Line:\\xA0\\xA0\\xA0\", a.firstlineadd, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 50\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 56\n        }, this), \"City:\\xA0\\xA0\\xA0\", a.city, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 36\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 42\n        }, this), \"Pincode:\\xA0\\xA0\\xA0\", a.pincode, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 42\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 48\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary\",\n            onClick: () => navigate(`/AddAddress/${a.addid}`),\n            children: \"Add Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 17\n          }, this)\n        }, a.UID, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 5\n        }, this)]\n      }, a.addid, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 1\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this);\n  }); // if (users!={}){\n\n  return (\n    /*#__PURE__*/\n    // <div><h1>Display</h1></div> //do this initially\n    _jsxDEV(\"div\", {\n      className: \"d-flex felx-row flex-wrap justify-content-between\",\n      children: cardofuser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 10\n    }, this)\n  );\n}, \"/EoT4cArgBFI8jqWP8QoCT4BVb4=\");","map":{"version":3,"sources":["C:/Users/91989/Desktop/Swabhav/reactAppwithgo/ui/src/DisplayUserAddress.js"],"names":["React","useState","useEffect","axios","DisplayUserAddress","useParams","useNavigate","roll","loginStatus","updateloginStatus","address","updateaddress","RollNo","console","log","loadusers","e","resp","get","catch","message","response","status","data","cardofuser","Object","values","map","a","width","marginBottom","addressname","firstlineadd","city","pincode","navigate","addid","UID"],"mappings":"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","sourcesContent":["import React,{useState,useEffect} from \"react\";\r\nimport axios from \"axios\";\r\nimport DisplayUserAddress from './DisplayUserAddress'\r\nimport {useParams} from \"react-router-dom\"\r\nimport { useNavigate } from \"react-router-dom\";\r\nexport default ({roll}) => {\r\nconst [loginStatus,updateloginStatus]=useState('')\r\n    const [address,updateaddress] = useState({})\r\n    let RollNo=roll \r\nconsole.log(RollNo)\r\n   \r\nconst loadusers = async (e)=>{\r\n    \r\n   const resp = await axios.get(`http://localhost:4002/api/v1/blog/addaddress/${RollNo}`).catch(e=>{\r\n       console.log(e.message)\r\n       if (e.response.status==401){\r\n        updateloginStatus('Unauthorized')        \r\n        return\r\n    } \r\n\r\n})\r\n\r\nif( resp!=null){\r\n   console.log(\"data: \",resp.data)\r\n   updateaddress(resp.data)\r\n}\r\n}\r\nuseEffect(() => {\r\n    \r\n    loadusers();\r\n},[])//useeffect for call method at time of load and only once\r\n\r\n//creating dynmic number of cards\r\nconst cardofuser = Object.values(address).map(a=>{\r\n    return (\r\n        <div className=\"card\" style={{ width:\"50%\", marginBottom:\"50px\"}}>\r\n\r\n<div className=\"card-body\" key={a.addid}>\r\n{/* ID:&nbsp;&nbsp;&nbsp;{u.UID}<br /><br /> */}\r\n    AddressName:&nbsp;&nbsp;&nbsp;{a.addressname}<br /><br />\r\n    First Line:&nbsp;&nbsp;&nbsp;{a.firstlineadd}<br /><br />\r\n    City:&nbsp;&nbsp;&nbsp;{a.city}<br /><br />\r\n    Pincode:&nbsp;&nbsp;&nbsp;{a.pincode}<br /><br />\r\n    <div className=\"card-body\" key={a.UID}>   \r\n            {/* <AddAddress r={u.RollNo}/> */}\r\n                <button className=\"btn btn-primary\" onClick={()=>navigate(`/AddAddress/${a.addid}`)}>Add Address</button>\r\n            </div>\r\n    \r\n{/* hello world */}\r\n</div>\r\n        </div>\r\n    )\r\n})\r\n// if (users!={}){\r\n    return(\r\n        // <div><h1>Display</h1></div> //do this initially\r\n         <div className=\"d-flex felx-row flex-wrap justify-content-between\">\r\n\r\n     {cardofuser}\r\n         </div> \r\n         )\r\n\r\n}"]},"metadata":{},"sourceType":"module"}